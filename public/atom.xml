<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[spring-grasshopper-86]]></title>
  <link href="http://zeke.heroku.com/atom.xml" rel="self"/>
  <link href="http://zeke.heroku.com/"/>
  <updated>2012-05-30T16:47:41-07:00</updated>
  <id>http://zeke.heroku.com/</id>
  <author>
    <name><![CDATA[Zeke Sikelianos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Haiku]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/30/haiku/"/>
    <updated>2012-05-30T16:29:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/30/haiku</id>
    <content type="html"><![CDATA[<p>As a heroku customer, I always wondered what words were used to generate app names like <em>electric-samurai-44</em> and and <em>morning-waterfall-387</em>. Now that I&#8217;m on the inside, I know. The class that generates these names is aptly named &#8220;Haiku&#8221;.</p>

<p><strong>Adjectives</strong>: afternoon, blazing, blooming, cold, deep, electric, empty, evening, falling, fierce, floating, freezing, furious, gentle, glowing, growing, high, hollow, morning, pure, quiet, radiant, severe, sharp, simple, smooth, stark, stormy, strong, vivid, warm, young.</p>

<p><strong>Nouns</strong>: autumn, beach, cloud, dawn, day, dusk, earth, fire, flower, fog, frost, galaxy, ice, journey, leaf, light, lightning, meadow, mist, mist, moon, mountain, mountain, night, ocean, planet, rain, river, robot, samurai, sky, snow, spring, stone, stream, summer, sunrise, sunset, sword, warrior, water, waterfall, wind, window, winter.</p>

<p>Bonus: If you happen to create a nameless app on Halloween, these adjectives are thrown into the mix: creepy, eerie, ghostly, ghoulish, grisly, haunted, macabre, scary, spooky.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Double-Slash?]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/25/protocol-relative-url/"/>
    <updated>2012-05-25T10:41:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/25/protocol-relative-url</id>
    <content type="html"><![CDATA[<p><img class="no-border" src="http://zeke.heroku.com/images/extra/http-double-slash.jpg" title="double-slash" ></p>

<p>Cruising through some heroku source code today, I came across a stylesheet link tag that
looked something like this:</p>

<pre><code>&lt;link href='http://zeke.heroku.com//nav.heroku.com/header.css' media='all' rel='stylesheet' type='text/css'&gt;
</code></pre>

<p>Notice the funky double-slash at the beginning of the URL. Weird, right? I&#8217;d never seen it either.
It&#8217;s a <strong>protocol-relative URL</strong>. <a href="http://paulirish.com/2010/the-protocol-relative-url/">Paul Irish explains:</a></p>

<p><em>&#8220;If the browser is viewing that current page in through HTTPS, then it&#8217;ll request that asset with the
HTTPS protocol, otherwise it&#8217;ll typically request it with HTTP. This prevents that awful &#8220;This Page
Contains Both Secure and Non-Secure Items&#8221; error message in IE, keeping all your asset requests
within the same protocol.&#8221;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Branch Or Not To Branch]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/16/to-branch-or-not-to-branch/"/>
    <updated>2012-05-16T22:52:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/16/to-branch-or-not-to-branch</id>
    <content type="html"><![CDATA[<p>I recently started a heroku email thread in search of a good git branching strategy. I got some good feedback:</p>

<p><strong><a href="https://twitter.com/#!/pvh">@pvh</a></strong>:
&#8220;Don&#8217;t branch! If you have to branch keep it short (like, a day or two tops). In general, everything you do (everywhere!) should be designed to roll out incrementally in many small steps. [&#8230;] To be fair, we don&#8217;t want &#8216;branches&#8217;, so much as we want transient named pull requests that use branches as a transport mechanism.&#8221;</p>

<p><strong><a href="https://twitter.com/#!/michaelahale">@michaelahale</a></strong>:
&#8220;I prefer short-lived feature branches. That provides an opportunity for review before committing to master. I&#8217;m pretty sure
everyone would agree that we do <strong>not</strong> want <a href="http://nvie.com/posts/a-successful-git-branching-model/">[the nvie branching model]</a>.&#8221;</p>

<p><strong><a href="https://twitter.com/#!/ped">@ped</a>ro</strong>:
&#8220;I think even with incremental roll outs branches are still useful.
At the API team we normally use branches for anything that is not
trivial or that deserves a review. The changes on the branch most of
the time are still designed to be rolled out incrementally, but having
a branch and pull request allows us to review those changes before
they get to master (and as we move close to automated deploys having
master always green/deployable is crucial).&#8221;</p>

<p><strong><a href="https://twitter.com/#!/glenngillen">@glenngillen</a></strong>:
&#8220;Probably a good summation: <a href="http://scottchacon.com/2011/08/31/github-flow.html">scottchacon.com/2011/08/31/github-flow.html</a>&#8221;</p>

<p><strong><a href="https://twitter.com/#!/em_csquared">@em_csquared</a></strong>:
&#8220;I think the real answer is that the
&#8216;heroku style&#8217; would be to do what works best for your team.
If other teams are doing something you like you should absolutely steal it.
And if they&#8217;re doing something you don&#8217;t then be an example of a better way.
[&#8230;] I&#8217;ve seen us internally use both &#8216;always commit
to master as soon as you can&#8217; and &#8216;never commit to master&#8217; strategies with
success.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The NERD Tree]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/15/the-nerd-tree/"/>
    <updated>2012-05-15T22:42:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/15/the-nerd-tree</id>
    <content type="html"><![CDATA[<p><img class="no-border" src="http://zeke.heroku.com/images/extra/spectropia.jpg" title="spectropia" ></p>

<p>While looking over <a href="https://twitter.com/#!/em_csquared/">Chris Continanza</a>&#8217;s shoulder today I couldn&#8217;t help but notice the awesome tool he was using to navigate directory trees within vim. It&#8217;s called <a href="https://github.com/scrooloose/nerdtree">nerdtree</a>. Yep, <a href="https://github.com/scrooloose/nerdtree">nerdtree</a>. Being a nerd and an arbophile, I installed it right away and am now climbing trees in vim like a pro. Keyboard-based file navigation in the terminal might just mean one less commercial software dependency in my toolbox: <a href="http://binarynights.com/">Forklift</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gmail on the iPhone]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/11/gmail-on-the-iphone/"/>
    <updated>2012-05-11T00:38:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/11/gmail-on-the-iphone</id>
    <content type="html"><![CDATA[<p>ProTip: You might think <strong>Gmail</strong> would be the option to pick here, but the better choice is actually <strong>Exchange</strong>.
Setting up your Gmail account with Exchange means your calendars and contacts get synced in addition to
your mail.</p>

<p><img src="http://f.cl.ly/items/0j2X3J1P0m1x1R0r191L/DropCloud%20May%208,%202012%203:23:49%20PM.png" width="320" height="480">
<img src="http://f.cl.ly/items/1E1s2V0o0E2w1A0D3z1c/DropCloud%20May%208,%202012%203:22:51%20PM.png" width="320" height="480"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping your unidyno humming]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/11/ping-heroku-keepalive/"/>
    <updated>2012-05-11T00:12:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/11/ping-heroku-keepalive</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve got a single-dyno app that keeps winding down from inactivity
and consequently taking a long time to restart, you can use the free
<a href="https://addons.heroku.com/scheduler">heroku scheduler</a> addon to keep it alive.</p>

<pre><code>heroku addons:add scheduler:standard
heroku addons:open scheduler
</code></pre>

<p><img src="http://f.cl.ly/items/2X0j1u010E3T0e1S1N0h/Screen%20Shot%202012-05-11%20at%2012.23.18%20AM.png" alt="heroku scheduler" /></p>

<p>Put this in your Rakefile and smoke it. I mean push it.</p>

<pre><code>require "net/http"

desc "Ping app"
task :ping do
  url = 'my-app.herokuapp.com'
  puts "ping? (#{url})"
  r = Net::HTTP.new(url, 80).request_head('/')
  puts "pong! (#{r.code} #{r.message})"
end
</code></pre>

<p>Sha. Push it. Push it reeeaall good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bun Dull Egg Zeck]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/10/bun-dull-egg-zeck/"/>
    <updated>2012-05-10T23:56:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/10/bun-dull-egg-zeck</id>
    <content type="html"><![CDATA[<p>News flash! When working on a ruby project, you should prepend every shell command
with <strong>bundle exec</strong> to ensure you&#8217;re using the bundled dependencies, and not
stuff that&#8217;s specific to your environment. But who wants to type
<strong>bundle exec</strong> 500 times a day? Neither I nor
<a href="http://blog.davidchelimsky.net/2011/07/18/stop-typing-bundle-exec/">David Chelimsky</a>.
That&#8217;s who.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What the eff is clang?]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/10/clang/"/>
    <updated>2012-05-10T23:42:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/10/clang</id>
    <content type="html"><![CDATA[<p>On my first day at heroku, I was happily setting up my machine for
development until a collision between Xcode 4.3.2 and rvm stopped me in my tracks.
After much googling, I found this insightful bit on
<a href="http://jfire.io/blog/2012/03/02/xcode-4-dot-3-homebrew-and-ruby/">jfire.io</a>:</p>

<p><em>Ruby on Mac OS Lion is going through a bit of a rough patch, installation-wise. With Xcode 4.2, clang became the default compiler and gcc was no longer included. Unfortunately, this has caused a lot of grief for Rubyists on OS X, because for a while, MRI did not officially support compiling with clang. With the release of 1.9.3-p125, that situation has changed–clang is now officially supported–but there are still some gotchas. This post details my toolchain and process for running MRI 1.9.3 and 1.8.7 on Lion with Xcode 4.3.</em></p>

<p>Installing GCC with homebrew is what solved it:</p>

<pre><code>brew update
brew install autoconf automake
brew install https://raw.github.com/Homebrew/homebrew-dupes/master/apple-gcc42.rb
rvm get head
rvm install 1.8.7
rvm install 1.9.3-head
</code></pre>

<p>Now I know what <a href="http://en.wikipedia.org/wiki/Clang">clang</a> is. Yay.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Postgres.app]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/10/postgres-dot-app/"/>
    <updated>2012-05-10T23:00:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/10/postgres-dot-app</id>
    <content type="html"><![CDATA[<p>Factor X in Adam Wiggins&#8217; <a href="http://www.12factor.net/dev-prod-parity">Twelve-Factor App</a>
is <strong>dev/prod parity</strong>: the idea that your development, staging, and production environments
should be as similar as possible to minimize unexpected problems.</p>

<p>For the heroku user, one easy move toward such parity is using postgres in the development
environment. In the past I was reluctant to use postgres because it was difficult to install
and it was always easier to use MySQL or SQLite because the barrier was lower.</p>

<p>But I&#8217;m happy to say that the <a href="http://twitter.com/mattt">@mattt</a>&#8217;s new project,
<a href="http://postgresapp.com/">Postgres.app</a>, soothes that pain: <em>&#8220;Open the app, and you have
a PostgreSQL server ready and awaiting new connections. Close the app, and the server shuts down.&#8221;</em>
Here&#8217;s an example database configuration that works with Postgres.app right out of the box:</p>

<pre><code>development:
  adapter: postgresql
  host: localhost
  database: dreamboat-development

test:
  adapter: postgresql
  host: localhost
  database: dreamboat-test
</code></pre>

<p>That&#8217;s not all folks. Postgress.app has a great logo too!</p>

<p><a href="http://postgresapp.com/">
  <img class="no-border" src="http://zeke.heroku.com/images/extra/netsuke.png">
</a></p>

<p><strong>Update</strong>: If you&#8217;ve already got another version of postgres installed, you may need to prepend Postgres.app&#8217;s binary to your PATH:</p>

<pre><code>export PATH=/Applications/Postgres.app/Contents/MacOS/bin:$PATH
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So It begins]]></title>
    <link href="http://zeke.heroku.com/blog/2012/05/10/so-it-begins/"/>
    <updated>2012-05-10T22:50:00-07:00</updated>
    <id>http://zeke.heroku.com/blog/2012/05/10/so-it-begins</id>
    <content type="html"><![CDATA[<p>Master Po: Do you hear the grasshopper that is at your feet?<br>
Young Caine: Old man, how is it that you hear these things?<br>
Master Po: Young man, how is it that you do not?</p>

<p><img src="http://zeke.heroku.com/images/extra/insecte-sauterelle.jpg" title="Insect Sauterelle Origami" ></p>
]]></content>
  </entry>
  
</feed>
